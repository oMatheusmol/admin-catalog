<div class="markdown prose w-full break-words dark:prose-invert dark"><h1>Categories Microservice Project</h1><p>This project is composed of a Categories microservice, developed with Nest.js, and several other tools for monitoring, load generation, data persistence, and search. Each service is a Docker container that can be run using Docker Compose.</p><h2>Services</h2><p>Here are the details of each service:</p><h3>Categories</h3><p>This is the main microservice that is built from the <code>categories/</code> directory. It is exposed on port 4000.</p><h3>Prometheus</h3><p>Prometheus is a monitoring tool that collects metrics from your service in real-time. In this project, it is configured with the <code>prom/prometheus:latest</code> image and is exposed on port 9090.</p><h3>Grafana</h3><p>Grafana is a visualization tool for metrics collected by Prometheus. It is configured with the <code>grafana/grafana:latest</code> image and is exposed on port 3000.</p><h3>Loadgen</h3><p>The load generator is a service that generates traffic to your microservice. It is built from the <code>./loadgenerator</code> directory and exposed on port 8089.</p><h3>MySQL</h3><p>MySQL is a relational database management system used to store your microservice's data. It is configured with the <code>mysql:8.0</code> image and exposed on port 3306.</p><h3>Elasticsearch</h3><p>Elasticsearch is a distributed search and analytics platform. It is configured with the <code>docker.elastic.co/elasticsearch/elasticsearch:7.14.0</code> image and is exposed on port 9200. In this project, Elasticsearch is being used to store application logs.</p><h3>Kibana</h3><p>Kibana is a user interface for Elasticsearch that allows you to visualize your indexed data. It is configured with the <code>docker.elastic.co/kibana/kibana:7.14.0</code> image and is exposed on port 5601. In this project, Kibana is being used to view the application logs.</p><h2>Running the Project</h2><p>To run this project, make sure you have Docker and Docker Compose installed. Then, from the root directory of the project, run the following command:</p><pre><div class="bg-black rounded-md mb-4"><div class="flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md"><button class="flex ml-auto gap-2"><svg stroke="currentColor" fill="none" stroke-width="2" viewBox="0 0 24 24" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path><rect x="8" y="2" width="8" height="4" rx="1" ry="1"></rect></svg>Copy code</button></div><div class="p-4 overflow-y-auto"><code class="!whitespace-pre hljs">docker-compose up
</code></div></div></pre><p>This will start all services. You can access each service by navigating to <code>localhost:&lt;port&gt;</code> in your browser, where <code>&lt;port&gt;</code> is the port the service is running on.</p><p>You can also stop all services by running the following command:</p><pre><div class="bg-black rounded-md mb-4"><div class="flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md"><button class="flex ml-auto gap-2"><svg stroke="currentColor" fill="none" stroke-width="2" viewBox="0 0 24 24" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path><rect x="8" y="2" width="8" height="4" rx="1" ry="1"></rect></svg>Copy code</button></div><div class="p-4 overflow-y-auto"><code class="!whitespace-pre hljs">docker-compose down
</code></div></div></pre>

![Nome alternativo](imagens/architecture.svg)

<h2>API Documentation</h2><p>The API documentation for the Categories service is available via Swagger and can be accessed at <a href="http://localhost:4000/api" target="_new">localhost:4000/api</a> or <a href="http://localhost:4000/docs" target="_new">localhost:4000/docs</a>. The Swagger documentation provides information about how the API works and how to interact with it.</p><h2>Accessing the Services</h2><p>Once the services are running, you can access them using the following URLs:</p><ul><li>Categories service: <a href="http://localhost:4000" target="_new">http://localhost:4000</a></li><li>Prometheus: <a href="http://localhost:9090" target="_new">http://localhost:9090</a></li><li>Grafana: <a href="http://localhost:3000" target="_new">http://localhost:3000</a></li><li>Load generator: <a href="http://localhost:8089" target="_new">http://localhost:8089</a></li><li>Elasticsearch: <a href="http://localhost:9200" target="_new">http://localhost:9200</a></li><li>Kibana: <a href="http://localhost:5601" target="_new">http://localhost:5601</a></li></ul><p>Please refer to the API documentation or the source code of the Categories microservice for more information about how the API functions.</p></div>
